#!/usr/bin/env python3
"""
Network Toolkit - C√¥ng c·ª• ki·ªÉm tra m·∫°ng to√†n di·ªán
H·ª£p nh·∫•t t·∫•t c·∫£ c√°c t√≠nh nƒÉng th√†nh m·ªôt tool duy nh·∫•t v·ªõi menu t√πy ch·ªçn
"""

import socket
import subprocess
import platform
import time
import threading
from concurrent.futures import ThreadPoolExecutor
import json
import sys
import os
from datetime import datetime
from typing import Dict, Any, List

# ============================================================================
# NETWORK LOGGER CLASS
# ============================================================================

class NetworkLogger:
    def __init__(self, log_file=None):
        self.logs = []
        self.session_id = datetime.now().strftime('%Y%m%d_%H%M%S')
        self.log_file = log_file or f"network_toolkit_logs_{self.session_id}.json"
        
    def log(self, action: str, status: str, details: Dict[str, Any] = None, message: str = ""):
        """Ghi log cho m·ªôt action"""
        log_entry = {
            'timestamp': datetime.now().isoformat(),
            'session_id': self.session_id,
            'action': action,
            'status': status,
            'message': message,
            'details': details or {}
        }
        
        self.logs.append(log_entry)
        
        # In ra console v·ªõi format ƒë·∫πp
        status_icon = {
            'success': '‚úÖ',
            'error': '‚ùå', 
            'warning': '‚ö†Ô∏è',
            'info': '‚ÑπÔ∏è',
            'start': 'üîç',
            'complete': '‚úÖ'
        }.get(status, 'üìù')
        
        print(f"{status_icon} [{action}] {message}")
        
        # L∆∞u v√†o file ngay l·∫≠p t·ª©c
        self.save_to_file()
        
        return log_entry
    
    def log_start(self, action: str, message: str = ""):
        return self.log(action, 'start', message=message or f"B·∫Øt ƒë·∫ßu {action}")
    
    def log_success(self, action: str, details: Dict[str, Any] = None, message: str = ""):
        return self.log(action, 'success', details, message or f"{action} th√†nh c√¥ng")
    
    def log_error(self, action: str, error: str, details: Dict[str, Any] = None):
        return self.log(action, 'error', details, f"{action} th·∫•t b·∫°i: {error}")
    
    def log_warning(self, action: str, warning: str, details: Dict[str, Any] = None):
        return self.log(action, 'warning', details, f"{action} c·∫£nh b√°o: {warning}")
    
    def log_info(self, action: str, info: str, details: Dict[str, Any] = None):
        return self.log(action, 'info', details, info)
    
    def get_summary(self) -> Dict[str, Any]:
        total_logs = len(self.logs)
        success_count = len([log for log in self.logs if log['status'] == 'success'])
        error_count = len([log for log in self.logs if log['status'] == 'error'])
        warning_count = len([log for log in self.logs if log['status'] == 'warning'])
        
        actions = list(set(log['action'] for log in self.logs))
        
        return {
            'session_id': self.session_id,
            'total_logs': total_logs,
            'success_count': success_count,
            'error_count': error_count,
            'warning_count': warning_count,
            'actions_performed': actions,
            'success_rate': round((success_count / total_logs * 100), 2) if total_logs > 0 else 0
        }
    
    def print_summary(self):
        summary = self.get_summary()
        
        print("\n" + "=" * 50)
        print("üìä T√ìM T·∫ÆT LOGS SESSION")
        print("=" * 50)
        print(f"üÜî Session ID: {summary['session_id']}")
        print(f"üìù T·ªïng logs: {summary['total_logs']}")
        print(f"‚úÖ Th√†nh c√¥ng: {summary['success_count']}")
        print(f"‚ùå L·ªói: {summary['error_count']}")
        print(f"‚ö†Ô∏è C·∫£nh b√°o: {summary['warning_count']}")
        print(f"üìà T·ª∑ l·ªá th√†nh c√¥ng: {summary['success_rate']}%")
        print(f"üéØ Actions: {', '.join(summary['actions_performed'])}")
        print("=" * 50)
    
    def save_to_file(self):
        try:
            log_data = {
                'session_info': {
                    'session_id': self.session_id,
                    'created_at': datetime.now().isoformat(),
                    'total_logs': len(self.logs)
                },
                'summary': self.get_summary(),
                'logs': self.logs
            }
            
            with open(self.log_file, 'w', encoding='utf-8') as f:
                json.dump(log_data, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            print(f"‚ùå L·ªói l∆∞u log file: {e}")
    
    def export_csv(self, csv_file=None, export_type="basic", filter_status=None, filter_action=None):
        """Export logs ra CSV v·ªõi nhi·ªÅu t√πy ch·ªçn"""
        import csv
        
        csv_file = csv_file or f"network_toolkit_logs_{self.session_id}.csv"
        
        try:
            # Filter logs theo y√™u c·∫ßu
            filtered_logs = self.logs
            
            if filter_status:
                filtered_logs = [log for log in filtered_logs if log['status'] == filter_status]
            
            if filter_action:
                filtered_logs = [log for log in filtered_logs if log['action'] == filter_action]
            
            if not filtered_logs:
                print("‚ùå Kh√¥ng c√≥ logs n√†o ph√π h·ª£p v·ªõi filter")
                return False
            
            with open(csv_file, 'w', newline='', encoding='utf-8') as f:
                if export_type == "basic":
                    fieldnames = ['timestamp', 'action', 'status', 'message']
                    writer = csv.DictWriter(f, fieldnames=fieldnames)
                    
                    writer.writeheader()
                    for log in filtered_logs:
                        writer.writerow({
                            'timestamp': log['timestamp'],
                            'action': log['action'],
                            'status': log['status'],
                            'message': log['message']
                        })
                
                elif export_type == "detailed":
                    fieldnames = ['timestamp', 'action', 'status', 'message', 'details']
                    writer = csv.DictWriter(f, fieldnames=fieldnames)
                    
                    writer.writeheader()
                    for log in filtered_logs:
                        writer.writerow({
                            'timestamp': log['timestamp'],
                            'action': log['action'],
                            'status': log['status'],
                            'message': log['message'],
                            'details': str(log.get('details', {}))
                        })
                
                elif export_type == "summary":
                    # Export summary statistics
                    fieldnames = ['metric', 'value']
                    writer = csv.DictWriter(f, fieldnames=fieldnames)
                    
                    writer.writeheader()
                    summary = self.get_summary()
                    for key, value in summary.items():
                        writer.writerow({
                            'metric': key,
                            'value': str(value)
                        })
                
                elif export_type == "performance":
                    # Export performance data
                    fieldnames = ['action', 'status', 'timestamp', 'execution_time', 'details']
                    writer = csv.DictWriter(f, fieldnames=fieldnames)
                    
                    writer.writeheader()
                    for log in filtered_logs:
                        details = log.get('details', {})
                        execution_time = ""
                        
                        # T√¨m execution time trong details
                        for key in ['execution_time_seconds', 'scan_duration_seconds', 'connect_time_ms', 'resolve_time_ms']:
                            if key in details:
                                execution_time = str(details[key])
                                break
                        
                        writer.writerow({
                            'action': log['action'],
                            'status': log['status'],
                            'timestamp': log['timestamp'],
                            'execution_time': execution_time,
                            'details': str(details)
                        })
                    
            print(f"üìÑ ƒê√£ export CSV ({export_type}): {csv_file}")
            print(f"üìä S·ªë records: {len(filtered_logs)}")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói export CSV: {e}")
            return False
    
    def interactive_csv_export(self):
        """Interactive CSV export v·ªõi menu t√πy ch·ªçn"""
        print("\nüìä CSV EXPORT - T√ôY CH·ªåN N√ÇNG CAO")
        print("=" * 50)
        
        if not self.logs:
            print("‚ùå Kh√¥ng c√≥ logs ƒë·ªÉ export")
            print("üí° Tip: Ch·∫°y m·ªôt v√†i tests tr∆∞·ªõc ƒë·ªÉ c√≥ logs")
            return False
        
        # Hi·ªÉn th·ªã th·ªëng k√™ hi·ªán t·∫°i
        summary = self.get_summary()
        print(f"üìù T·ªïng logs: {summary['total_logs']}")
        print(f"‚úÖ Th√†nh c√¥ng: {summary['success_count']}")
        print(f"‚ùå L·ªói: {summary['error_count']}")
        print(f"‚ö†Ô∏è C·∫£nh b√°o: {summary['warning_count']}")
        print(f"üéØ Actions: {', '.join(summary['actions_performed'])}")
        
        print("\nüìã CH·ªåN LO·∫†I EXPORT:")
        print("1. Basic Export      - Timestamp, Action, Status, Message")
        print("2. Detailed Export   - Bao g·ªìm c·∫£ Details")
        print("3. Summary Export    - Ch·ªâ th·ªëng k√™ t·ªïng h·ª£p")
        print("4. Performance Export - Focus v√†o th·ªùi gian th·ª±c hi·ªán")
        print("5. Custom Filter     - T√πy ch·ªçn filter")
        print("0. H·ªßy")
        
        try:
            choice = int(input("\nüëâ Ch·ªçn lo·∫°i export (0-5): ").strip())
            
            if choice == 0:
                print("‚ùå ƒê√£ h·ªßy export")
                return False
            
            # T√™n file
            default_name = f"network_toolkit_export_{self.session_id}.csv"
            csv_file = input(f"\nüìÅ T√™n file CSV (Enter = {default_name}): ").strip()
            if not csv_file:
                csv_file = default_name
            
            if choice == 1:
                return self.export_csv(csv_file, "basic")
            
            elif choice == 2:
                return self.export_csv(csv_file, "detailed")
            
            elif choice == 3:
                return self.export_csv(csv_file, "summary")
            
            elif choice == 4:
                return self.export_csv(csv_file, "performance")
            
            elif choice == 5:
                # Custom filter
                print("\nüîç CUSTOM FILTER OPTIONS:")
                
                # Filter by status
                print(f"üìä Available statuses: success, error, warning, info, start")
                filter_status = input("Filter by status (Enter = all): ").strip()
                if not filter_status:
                    filter_status = None
                
                # Filter by action
                print(f"üéØ Available actions: {', '.join(summary['actions_performed'])}")
                filter_action = input("Filter by action (Enter = all): ").strip()
                if not filter_action:
                    filter_action = None
                
                # Export type
                print("\nüìã Export format:")
                print("1. Basic   2. Detailed")
                format_choice = input("Ch·ªçn format (1-2, Enter = 1): ").strip()
                export_type = "detailed" if format_choice == "2" else "basic"
                
                return self.export_csv(csv_file, export_type, filter_status, filter_action)
            
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
                return False
                
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá")
            return False
        except KeyboardInterrupt:
            print("\n‚ùå ƒê√£ h·ªßy export")
            return False
    
    def export_html(self, html_file=None, report_type="comprehensive"):
        """Export logs ra HTML report ƒë·∫πp m·∫Øt"""
        html_file = html_file or f"network_toolkit_report_{self.session_id}.html"
        
        try:
            summary = self.get_summary()
            
            # HTML Template
            html_content = f"""
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Network Toolkit Report - {summary['session_id']}</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }}
        
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }}
        
        .header {{
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }}
        
        .header h1 {{
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }}
        
        .header .subtitle {{
            font-size: 1.2em;
            opacity: 0.9;
        }}
        
        .content {{
            padding: 30px;
        }}
        
        .summary-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}
        
        .summary-card {{
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 25px;
            border-radius: 10px;
            border-left: 5px solid;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }}
        
        .summary-card:hover {{
            transform: translateY(-5px);
        }}
        
        .summary-card.success {{
            border-left-color: #28a745;
        }}
        
        .summary-card.error {{
            border-left-color: #dc3545;
        }}
        
        .summary-card.warning {{
            border-left-color: #ffc107;
        }}
        
        .summary-card.info {{
            border-left-color: #17a2b8;
        }}
        
        .summary-card h3 {{
            font-size: 1.1em;
            margin-bottom: 10px;
            color: #495057;
        }}
        
        .summary-card .value {{
            font-size: 2.5em;
            font-weight: bold;
            color: #2c3e50;
        }}
        
        .logs-section {{
            margin-top: 40px;
        }}
        
        .section-title {{
            font-size: 1.8em;
            margin-bottom: 20px;
            color: #2c3e50;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
        }}
        
        .logs-table {{
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }}
        
        .logs-table th {{
            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
            color: white;
            padding: 15px;
            text-align: left;
            font-weight: 600;
        }}
        
        .logs-table td {{
            padding: 12px 15px;
            border-bottom: 1px solid #eee;
        }}
        
        .logs-table tr:hover {{
            background-color: #f8f9fa;
        }}
        
        .status-badge {{
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.85em;
            font-weight: bold;
            text-transform: uppercase;
        }}
        
        .status-success {{
            background-color: #d4edda;
            color: #155724;
        }}
        
        .status-error {{
            background-color: #f8d7da;
            color: #721c24;
        }}
        
        .status-warning {{
            background-color: #fff3cd;
            color: #856404;
        }}
        
        .status-info {{
            background-color: #d1ecf1;
            color: #0c5460;
        }}
        
        .status-start {{
            background-color: #e2e3e5;
            color: #383d41;
        }}
        
        .timestamp {{
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            color: #6c757d;
        }}
        
        .action-tag {{
            background-color: #e9ecef;
            padding: 3px 8px;
            border-radius: 5px;
            font-size: 0.85em;
            color: #495057;
        }}
        
        .footer {{
            background-color: #f8f9fa;
            padding: 20px;
            text-align: center;
            color: #6c757d;
            border-top: 1px solid #dee2e6;
        }}
        
        .progress-bar {{
            width: 100%;
            height: 20px;
            background-color: #e9ecef;
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }}
        
        .progress-fill {{
            height: 100%;
            background: linear-gradient(90deg, #28a745 0%, #20c997 100%);
            transition: width 0.3s ease;
        }}
        
        .chart-container {{
            margin: 20px 0;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
        }}
        
        @media (max-width: 768px) {{
            .summary-grid {{
                grid-template-columns: 1fr;
            }}
            
            .logs-table {{
                font-size: 0.9em;
            }}
            
            .header h1 {{
                font-size: 2em;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üåê Network Toolkit Report</h1>
            <div class="subtitle">Session: {summary['session_id']} | Generated: {self._format_timestamp()}</div>
        </div>
        
        <div class="content">
            <!-- Summary Cards -->
            <div class="summary-grid">
                <div class="summary-card success">
                    <h3>‚úÖ Successful Operations</h3>
                    <div class="value">{summary['success_count']}</div>
                </div>
                
                <div class="summary-card error">
                    <h3>‚ùå Failed Operations</h3>
                    <div class="value">{summary['error_count']}</div>
                </div>
                
                <div class="summary-card warning">
                    <h3>‚ö†Ô∏è Warnings</h3>
                    <div class="value">{summary['warning_count']}</div>
                </div>
                
                <div class="summary-card info">
                    <h3>üìä Total Logs</h3>
                    <div class="value">{summary['total_logs']}</div>
                </div>
            </div>
            
            <!-- Success Rate -->
            <div class="chart-container">
                <h3>üìà Success Rate: {summary['success_rate']}%</h3>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: {summary['success_rate']}%"></div>
                </div>
            </div>
            
            <!-- Actions Performed -->
            <div class="chart-container">
                <h3>üéØ Actions Performed</h3>
                <div style="margin-top: 15px;">
                    {self._generate_action_tags(summary['actions_performed'])}
                </div>
            </div>
"""
            
            if report_type == "comprehensive":
                html_content += self._generate_logs_table()
            
            html_content += f"""
        </div>
        
        <div class="footer">
            <p>Generated by Network Toolkit | {self._format_timestamp()}</p>
            <p>üìß For support: <a href="mailto:support@networktoolkit.com">support@networktoolkit.com</a></p>
        </div>
    </div>
    
    <script>
        // Add some interactivity
        document.addEventListener('DOMContentLoaded', function() {{
            // Animate progress bar
            const progressBar = document.querySelector('.progress-fill');
            if (progressBar) {{
                setTimeout(() => {{
                    progressBar.style.width = '{summary['success_rate']}%';
                }}, 500);
            }}
            
            // Add click handlers for summary cards
            const cards = document.querySelectorAll('.summary-card');
            cards.forEach(card => {{
                card.addEventListener('click', function() {{
                    this.style.transform = 'scale(0.95)';
                    setTimeout(() => {{
                        this.style.transform = 'translateY(-5px)';
                    }}, 150);
                }});
            }});
        }});
    </script>
</body>
</html>
"""
            
            with open(html_file, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            print(f"üåê ƒê√£ t·∫°o HTML report: {html_file}")
            print(f"üìä M·ªü file trong browser ƒë·ªÉ xem b√°o c√°o ƒë·∫πp m·∫Øt!")
            
            # H·ªèi c√≥ mu·ªën m·ªü file kh√¥ng
            try:
                open_file = input("üåê M·ªü file trong browser ngay? (y/N): ").strip().lower()
                if open_file in ['y', 'yes']:
                    self._open_html_file(html_file)
            except KeyboardInterrupt:
                pass
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói t·∫°o HTML report: {e}")
            return False
    
    def _format_timestamp(self):
        """Format timestamp cho HTML"""
        from datetime import datetime
        return datetime.now().strftime('%d/%m/%Y %H:%M:%S')
    
    def _generate_action_tags(self, actions):
        """T·∫°o action tags cho HTML"""
        tags_html = ""
        for action in actions:
            tags_html += f'<span class="action-tag">{action}</span> '
        return tags_html
    
    def _generate_logs_table(self):
        """T·∫°o b·∫£ng logs cho HTML"""
        if not self.logs:
            return "<p>Kh√¥ng c√≥ logs ƒë·ªÉ hi·ªÉn th·ªã.</p>"
        
        table_html = """
            <div class="logs-section">
                <h2 class="section-title">üìã Detailed Logs</h2>
                <table class="logs-table">
                    <thead>
                        <tr>
                            <th>‚è∞ Timestamp</th>
                            <th>üéØ Action</th>
                            <th>üìä Status</th>
                            <th>üí¨ Message</th>
                        </tr>
                    </thead>
                    <tbody>
        """
        
        # Ch·ªâ hi·ªÉn th·ªã 50 logs g·∫ßn nh·∫•t ƒë·ªÉ tr√°nh file qu√° l·ªõn
        recent_logs = self.logs[-50:] if len(self.logs) > 50 else self.logs
        
        for log in recent_logs:
            timestamp = log['timestamp'].split('T')[1].split('.')[0]  # Ch·ªâ l·∫•y time
            status_class = f"status-{log['status']}"
            
            table_html += f"""
                        <tr>
                            <td class="timestamp">{timestamp}</td>
                            <td><span class="action-tag">{log['action']}</span></td>
                            <td><span class="status-badge {status_class}">{log['status']}</span></td>
                            <td>{log['message']}</td>
                        </tr>
            """
        
        table_html += """
                    </tbody>
                </table>
            </div>
        """
        
        if len(self.logs) > 50:
            table_html += f"<p style='text-align: center; margin-top: 15px; color: #6c757d;'>Hi·ªÉn th·ªã 50 logs g·∫ßn nh·∫•t (t·ªïng: {len(self.logs)} logs)</p>"
        
        return table_html
    
    def interactive_html_export(self):
        """Interactive HTML export v·ªõi menu t√πy ch·ªçn"""
        print("\nüåê HTML REPORT EXPORT")
        print("=" * 50)
        
        if not self.logs:
            print("‚ùå Kh√¥ng c√≥ logs ƒë·ªÉ t·∫°o report")
            print("üí° Tip: Ch·∫°y m·ªôt v√†i tests tr∆∞·ªõc ƒë·ªÉ c√≥ logs")
            return False
        
        # Hi·ªÉn th·ªã th·ªëng k√™ hi·ªán t·∫°i
        summary = self.get_summary()
        print(f"üìù T·ªïng logs: {summary['total_logs']}")
        print(f"‚úÖ Th√†nh c√¥ng: {summary['success_count']}")
        print(f"‚ùå L·ªói: {summary['error_count']}")
        print(f"üìà Success rate: {summary['success_rate']}%")
        
        print("\nüìã CH·ªåN LO·∫†I REPORT:")
        print("1. Comprehensive Report - Bao g·ªìm summary + detailed logs")
        print("2. Summary Only        - Ch·ªâ th·ªëng k√™ t·ªïng h·ª£p")
        print("0. H·ªßy")
        
        try:
            choice = int(input("\nüëâ Ch·ªçn lo·∫°i report (0-2): ").strip())
            
            if choice == 0:
                print("‚ùå ƒê√£ h·ªßy t·∫°o report")
                return False
            
            # T√™n file
            default_name = f"network_toolkit_report_{self.session_id}.html"
            html_file = input(f"\nüìÅ T√™n file HTML (Enter = {default_name}): ").strip()
            if not html_file:
                html_file = default_name
            
            if choice == 1:
                return self.export_html(html_file, "comprehensive")
            elif choice == 2:
                return self.export_html(html_file, "summary")
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
                return False
                
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá")
            return False
        except KeyboardInterrupt:
            print("\n‚ùå ƒê√£ h·ªßy t·∫°o report")
            return False
    
    def _open_html_file(self, html_file):
        """M·ªü HTML file trong browser"""
        import webbrowser
        import os
        
        try:
            # L·∫•y absolute path
            abs_path = os.path.abspath(html_file)
            file_url = f"file://{abs_path}"
            
            # M·ªü trong browser
            webbrowser.open(file_url)
            print(f"üåê ƒê√£ m·ªü {html_file} trong browser")
        except Exception as e:
            print(f"‚ùå Kh√¥ng th·ªÉ m·ªü file trong browser: {e}")
            print(f"üí° B·∫°n c√≥ th·ªÉ m·ªü file th·ªß c√¥ng: {html_file}")

# ============================================================================
# NETWORK TOOLKIT CLASS
# ============================================================================

class NetworkToolkit:
    def __init__(self):
        self.results = {}
        self.logger = NetworkLogger()
        
    # ========================================================================
    # BASIC NETWORK FUNCTIONS
    # ========================================================================
    
    def ping_test(self, host="8.8.8.8", count=2):
        """Ki·ªÉm tra ping ƒë·∫øn host"""
        self.logger.log_start("ping_test", f"Ping {host} v·ªõi {count} packets")
        
        param = "-n" if platform.system().lower() == "windows" else "-c"
        command = ["ping", param, str(count), host]
        
        try:
            start_time = time.time()
            result = subprocess.run(command, capture_output=True, text=True, timeout=15)
            execution_time = time.time() - start_time
            
            ping_details = {
                'host': host,
                'count': count,
                'command': ' '.join(command),
                'return_code': result.returncode,
                'execution_time_seconds': round(execution_time, 2),
                'output_length': len(result.stdout) if result.stdout else 0
            }
            
            success = result.returncode == 0
            self.results[f'ping_{host}'] = {
                'host': host,
                'success': success,
                'execution_time': execution_time,
                'details': ping_details
            }
            
            if success:
                self.logger.log_success("ping_test", ping_details, 
                                      f"Ping {host} th√†nh c√¥ng ({execution_time:.2f}s)")
                return True
            else:
                self.logger.log_error("ping_test", f"Ping {host} th·∫•t b·∫°i", ping_details)
                return False
                
        except subprocess.TimeoutExpired:
            error_details = {'host': host, 'timeout': 15, 'error_type': 'timeout'}
            self.logger.log_error("ping_test", f"Ping {host} timeout", error_details)
            self.results[f'ping_{host}'] = {'host': host, 'success': False, 'error': 'timeout'}
            return False
        except Exception as e:
            error_details = {'host': host, 'error_type': 'exception', 'exception': str(e)}
            self.logger.log_error("ping_test", str(e), error_details)
            self.results[f'ping_{host}'] = {'host': host, 'success': False, 'error': str(e)}
            return False
    
    def check_dns(self, domains=None):
        """Ki·ªÉm tra DNS resolution"""
        if domains is None:
            domains = ["google.com", "github.com", "cloudflare.com"]
        
        self.logger.log_start("dns_check", f"Ki·ªÉm tra DNS cho {len(domains)} domains")
        
        dns_results = []
        success_count = 0
        
        for domain in domains:
            try:
                start_time = time.time()
                ip = socket.gethostbyname(domain)
                resolve_time = (time.time() - start_time) * 1000
                
                dns_result = {
                    'domain': domain, 
                    'ip': ip, 
                    'success': True, 
                    'resolve_time_ms': round(resolve_time, 2)
                }
                dns_results.append(dns_result)
                success_count += 1
                
                self.logger.log_success("dns_resolve", dns_result,
                                      f"DNS {domain} -> {ip} ({resolve_time:.2f}ms)")
                
            except socket.gaierror as e:
                dns_result = {'domain': domain, 'success': False, 'error': str(e), 'error_type': 'gaierror'}
                dns_results.append(dns_result)
                self.logger.log_error("dns_resolve", str(e), dns_result)
            except Exception as e:
                dns_result = {'domain': domain, 'success': False, 'error': str(e), 'error_type': 'exception'}
                dns_results.append(dns_result)
                self.logger.log_error("dns_resolve", str(e), dns_result)
        
        self.results['dns'] = dns_results
        
        summary = {
            'total_domains': len(domains), 
            'success_count': success_count, 
            'success_rate': success_count/len(domains)*100
        }
        
        self.logger.log_success("dns_check", summary,
                              f"DNS check ho√†n th√†nh: {success_count}/{len(domains)} th√†nh c√¥ng")
        
        return success_count == len(domains)
    
    def check_connectivity(self, hosts=None):
        """Ki·ªÉm tra k·∫øt n·ªëi socket"""
        if hosts is None:
            hosts = [("google.com", 80), ("github.com", 443), ("1.1.1.1", 53)]
        
        self.logger.log_start("connectivity_check", f"Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn {len(hosts)} hosts")
        
        connectivity_results = []
        success_count = 0
        
        for host, port in hosts:
            try:
                start_time = time.time()
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(5)
                result = sock.connect_ex((host, port))
                sock.close()
                connect_time = (time.time() - start_time) * 1000
                
                if result == 0:
                    conn_result = {
                        'host': host,
                        'port': port,
                        'success': True,
                        'connect_time_ms': round(connect_time, 2)
                    }
                    connectivity_results.append(conn_result)
                    success_count += 1
                    
                    self.logger.log_success("connectivity_test", conn_result,
                                          f"{host}:{port} k·∫øt n·ªëi OK ({connect_time:.2f}ms)")
                else:
                    conn_result = {
                        'host': host,
                        'port': port,
                        'success': False,
                        'error': f'Connection failed (code: {result})'
                    }
                    connectivity_results.append(conn_result)
                    self.logger.log_error("connectivity_test", f"K·∫øt n·ªëi th·∫•t b·∫°i", conn_result)
                    
            except Exception as e:
                conn_result = {
                    'host': host,
                    'port': port,
                    'success': False,
                    'error': str(e)
                }
                connectivity_results.append(conn_result)
                self.logger.log_error("connectivity_test", str(e), conn_result)
        
        self.results['connectivity'] = connectivity_results
        
        summary = {
            'total_hosts': len(hosts),
            'success_count': success_count,
            'success_rate': success_count/len(hosts)*100
        }
        
        self.logger.log_success("connectivity_check", summary,
                              f"Connectivity check ho√†n th√†nh: {success_count}/{len(hosts)} th√†nh c√¥ng")
        
        return success_count == len(hosts)
    
    def get_local_info(self):
        """L·∫•y th√¥ng tin m·∫°ng local"""
        self.logger.log_start("local_info", "L·∫•y th√¥ng tin m·∫°ng local")
        
        try:
            hostname = socket.gethostname()
            local_ip = socket.gethostbyname(hostname)
            
            local_details = {
                'hostname': hostname,
                'local_ip': local_ip,
                'platform': platform.system(),
                'platform_release': platform.release()
            }
            
            self.results['local_info'] = local_details
            
            self.logger.log_success("local_info", local_details,
                                  f"Local info: {hostname} ({local_ip})")
            
            return True
            
        except Exception as e:
            error_details = {'error': str(e), 'error_type': 'exception'}
            self.logger.log_error("local_info", str(e), error_details)
            self.results['local_info'] = {'success': False, 'error': str(e)}
            return False
    
    # ========================================================================
    # ADVANCED NETWORK FUNCTIONS
    # ========================================================================
    
    def port_scan(self, host="127.0.0.1", ports=None, port_range=None):
        """Scan c√°c port"""
        if ports is None and port_range is None:
            ports = [22, 23, 25, 53, 80, 443, 3389, 5432, 3306]
        elif port_range:
            start_port, end_port = port_range
            ports = list(range(start_port, end_port + 1))
        
        self.logger.log_start("port_scan", f"Scanning {len(ports)} ports tr√™n {host}")
        
        def check_port(port):
            try:
                start_time = time.time()
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(2)
                result = sock.connect_ex((host, port))
                sock.close()
                connect_time = (time.time() - start_time) * 1000
                
                if result == 0:
                    self.logger.log_success("port_check", 
                                          {'host': host, 'port': port, 'connect_time_ms': connect_time},
                                          f"Port {port} m·ªü ({connect_time:.2f}ms)")
                    return {'port': port, 'status': 'open', 'connect_time_ms': round(connect_time, 2)}
                else:
                    return {'port': port, 'status': 'closed'}
            except Exception as e:
                self.logger.log_error("port_check", str(e), {'host': host, 'port': port})
                return {'port': port, 'status': 'error', 'error': str(e)}
        
        start_scan_time = time.time()
        with ThreadPoolExecutor(max_workers=50) as executor:
            port_results = list(executor.map(check_port, ports))
        scan_duration = time.time() - start_scan_time
        
        # Ph√¢n t√≠ch k·∫øt qu·∫£
        open_ports = [p for p in port_results if p['status'] == 'open']
        closed_ports = [p for p in port_results if p['status'] == 'closed']
        error_ports = [p for p in port_results if p['status'] == 'error']
        
        scan_summary = {
            'host': host,
            'total_ports': len(ports),
            'open_count': len(open_ports),
            'closed_count': len(closed_ports),
            'error_count': len(error_ports),
            'scan_duration_seconds': round(scan_duration, 2),
            'open_ports': [p['port'] for p in open_ports]
        }
        
        self.results['port_scan'] = {
            'host': host,
            'results': port_results,
            'open_ports': [p['port'] for p in open_ports],
            'summary': scan_summary
        }
        
        # Log k·∫øt qu·∫£ t·ªïng
        if open_ports:
            self.logger.log_success("port_scan", scan_summary, 
                                  f"Port scan ho√†n th√†nh: {len(open_ports)} ports m·ªü")
            print(f"‚úÖ T√¨m th·∫•y {len(open_ports)} port m·ªü: {[p['port'] for p in open_ports]}")
        else:
            self.logger.log_warning("port_scan", "Kh√¥ng t√¨m th·∫•y port n√†o m·ªü", scan_summary)
            print("‚ùå Kh√¥ng t√¨m th·∫•y port n√†o m·ªü")
        
        return len(open_ports) > 0
    
    def network_scan(self, network="192.168.1", start=1, end=10):
        """Qu√©t c√°c thi·∫øt b·ªã trong m·∫°ng LAN"""
        ip_range = f"{network}.{start}-{end}"
        total_ips = end - start + 1
        self.logger.log_start("network_scan", f"Qu√©t {total_ips} IPs trong range {ip_range}")
        
        active_hosts = []
        
        def ping_host(ip):
            try:
                if platform.system().lower() == "windows":
                    cmd = ["ping", "-n", "1", "-w", "500", ip]
                else:
                    cmd = ["ping", "-c", "1", "-W", "1", ip]
                
                start_ping = time.time()
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=2)
                ping_time = time.time() - start_ping
                
                if result.returncode == 0:
                    self.logger.log_success("host_ping", 
                                          {'ip': ip, 'ping_time_ms': round(ping_time * 1000, 2)},
                                          f"T√¨m th·∫•y thi·∫øt b·ªã: {ip}")
                    return ip
                    
            except Exception as e:
                self.logger.log_error("host_ping", str(e), {'ip': ip})
            return None
        
        ips = [f"{network}.{i}" for i in range(start, end + 1)]
        
        scan_start_time = time.time()
        with ThreadPoolExecutor(max_workers=10) as executor:
            results = executor.map(ping_host, ips)
            active_hosts = [ip for ip in results if ip is not None]
        scan_duration = time.time() - scan_start_time
        
        scan_summary = {
            'network_range': ip_range,
            'total_ips_scanned': total_ips,
            'active_hosts_found': len(active_hosts),
            'scan_duration_seconds': round(scan_duration, 2),
            'active_hosts': active_hosts,
            'discovery_rate': len(active_hosts) / total_ips * 100 if total_ips > 0 else 0
        }
        
        if active_hosts:
            self.logger.log_success("network_scan", scan_summary,
                                  f"Network scan ho√†n th√†nh: {len(active_hosts)} thi·∫øt b·ªã t√¨m th·∫•y")
            print(f"‚úÖ T√¨m th·∫•y {len(active_hosts)} thi·∫øt b·ªã:")
            for host in active_hosts:
                print(f"   üì± {host}")
        else:
            self.logger.log_warning("network_scan", "Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã n√†o", scan_summary)
            print("‚ùå Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã n√†o")
            
        self.results['network_scan'] = scan_summary
        return len(active_hosts) > 0
    
    def bandwidth_test(self, host="google.com", port=80, duration=5):
        """Ki·ªÉm tra bƒÉng th√¥ng ƒë∆°n gi·∫£n"""
        self.logger.log_start("bandwidth_test", f"Ki·ªÉm tra bƒÉng th√¥ng ƒë·∫øn {host}:{port} trong {duration}s")
        
        try:
            start_time = time.time()
            total_bytes = 0
            connections_made = 0
            
            while time.time() - start_time < duration:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(2)
                
                try:
                    sock.connect((host, port))
                    connections_made += 1
                    request = f"GET / HTTP/1.1\r\nHost: {host}\r\n\r\n"
                    sock.send(request.encode())
                    
                    while True:
                        data = sock.recv(4096)
                        if not data:
                            break
                        total_bytes += len(data)
                        
                except socket.timeout:
                    break
                except Exception:
                    break
                finally:
                    sock.close()
            
            elapsed = time.time() - start_time
            if elapsed > 0 and total_bytes > 0:
                speed_bps = total_bytes / elapsed
                speed_kbps = speed_bps / 1024
                speed_mbps = speed_kbps / 1024
                
                bandwidth_details = {
                    'host': host,
                    'port': port,
                    'duration_seconds': round(elapsed, 2),
                    'total_bytes': total_bytes,
                    'connections_made': connections_made,
                    'speed_bps': round(speed_bps, 2),
                    'speed_kbps': round(speed_kbps, 2),
                    'speed_mbps': round(speed_mbps, 2)
                }
                
                self.logger.log_success("bandwidth_test", bandwidth_details,
                                      f"BƒÉng th√¥ng: {speed_mbps:.2f} Mbps ({total_bytes} bytes)")
                
                print(f"‚úÖ T·ªëc ƒë·ªô ∆∞·ªõc t√≠nh: {speed_mbps:.2f} Mbps ({speed_kbps:.2f} Kbps)")
                
                self.results['bandwidth_test'] = bandwidth_details
                return True
            else:
                error_details = {'host': host, 'port': port, 'total_bytes': total_bytes, 'elapsed': elapsed}
                self.logger.log_error("bandwidth_test", "Kh√¥ng th·ªÉ ƒëo ƒë∆∞·ª£c t·ªëc ƒë·ªô", error_details)
                print("‚ùå Kh√¥ng th·ªÉ ƒëo ƒë∆∞·ª£c t·ªëc ƒë·ªô")
                return False
                
        except Exception as e:
            error_details = {'host': host, 'port': port, 'error_type': 'exception', 'exception': str(e)}
            self.logger.log_error("bandwidth_test", str(e), error_details)
            print(f"‚ùå L·ªói ki·ªÉm tra bƒÉng th√¥ng: {e}")
            return False
    
    def traceroute(self, target="8.8.8.8", max_hops=15):
        """Th·ª±c hi·ªán traceroute ƒë·∫øn target"""
        self.logger.log_start("traceroute", f"Traceroute ƒë·∫øn {target} v·ªõi max {max_hops} hops")
        
        try:
            os_type = platform.system().lower()
            if os_type == "windows":
                cmd = ["tracert", "-h", str(max_hops), "-w", "3000", target]
            else:
                cmd = ["traceroute", "-m", str(max_hops), "-w", "3", target]
            
            start_time = time.time()
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=45)
            execution_time = time.time() - start_time
            
            traceroute_details = {
                'target': target,
                'max_hops': max_hops,
                'os_type': os_type,
                'command': ' '.join(cmd),
                'execution_time_seconds': round(execution_time, 2),
                'return_code': result.returncode,
                'output_lines': len(result.stdout.split('\n')) if result.stdout else 0
            }
            
            if result.returncode == 0:
                self.logger.log_success("traceroute", traceroute_details,
                                      f"Traceroute ƒë·∫øn {target} ho√†n th√†nh ({execution_time:.2f}s)")
                print("‚úÖ Traceroute ho√†n th√†nh:")
                print(result.stdout[:1000] + "..." if len(result.stdout) > 1000 else result.stdout)
                
                self.results['traceroute'] = traceroute_details
                return True
            else:
                self.logger.log_error("traceroute", f"Command failed: {result.stderr}", traceroute_details)
                print(f"‚ùå Traceroute th·∫•t b·∫°i: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            timeout_details = {'target': target, 'timeout_seconds': 45}
            self.logger.log_error("traceroute", "Command timeout after 45 seconds", timeout_details)
            print("‚ùå Traceroute timeout")
            return False
        except Exception as e:
            error_details = {'target': target, 'error_type': 'exception', 'exception': str(e)}
            self.logger.log_error("traceroute", str(e), error_details)
            print(f"‚ùå L·ªói traceroute: {e}")
            return False
    
    def get_network_stats(self):
        """L·∫•y th·ªëng k√™ m·∫°ng chi ti·∫øt"""
        self.logger.log_start("network_stats", "L·∫•y th·ªëng k√™ m·∫°ng v√† k·∫øt n·ªëi")
        
        try:
            os_type = platform.system().lower()
            
            if os_type == "windows":
                stats_cmd = ["netstat", "-e"]
                connections_cmd = ["netstat", "-an"]
            else:
                stats_cmd = ["netstat", "-i"]
                connections_cmd = ["netstat", "-tuln"]
            
            # L·∫•y interface statistics
            start_time = time.time()
            result = subprocess.run(stats_cmd, capture_output=True, text=True, timeout=10)
            stats_time = time.time() - start_time
            
            if result.returncode != 0:
                raise Exception(f"Stats command failed: {result.stderr}")
            
            stats_output = result.stdout
            
            # L·∫•y connections
            start_time = time.time()
            connections = subprocess.run(connections_cmd, capture_output=True, text=True, timeout=10)
            connections_time = time.time() - start_time
            
            if connections.returncode != 0:
                raise Exception(f"Connections command failed: {connections.stderr}")
            
            connections_output = connections.stdout
            
            # Ph√¢n t√≠ch k·∫øt qu·∫£
            stats_lines = len(stats_output.split('\n'))
            connections_lines = len(connections_output.split('\n'))
            
            network_stats_details = {
                'os_type': os_type,
                'stats_command': ' '.join(stats_cmd),
                'connections_command': ' '.join(connections_cmd),
                'stats_execution_time_seconds': round(stats_time, 2),
                'connections_execution_time_seconds': round(connections_time, 2),
                'stats_output_lines': stats_lines,
                'connections_output_lines': connections_lines,
                'total_output_size': len(stats_output) + len(connections_output)
            }
            
            self.logger.log_success("network_stats", network_stats_details,
                                  f"Network stats ho√†n th√†nh ({stats_lines + connections_lines} lines)")
            
            print("‚úÖ Th·ªëng k√™ m·∫°ng:")
            print("Interface Statistics:")
            print(stats_output[:500] + "..." if len(stats_output) > 500 else stats_output)
            print("\nActive Connections:")
            print(connections_output[:500] + "..." if len(connections_output) > 500 else connections_output)
            
            self.results['network_stats'] = network_stats_details
            return True
            
        except subprocess.TimeoutExpired:
            timeout_details = {'commands': [' '.join(stats_cmd), ' '.join(connections_cmd)]}
            self.logger.log_error("network_stats", "Command timeout", timeout_details)
            print("‚ùå L·ªói: Command timeout")
            return False
        except Exception as e:
            error_details = {'error_type': 'exception', 'exception': str(e)}
            self.logger.log_error("network_stats", str(e), error_details)
            print(f"‚ùå L·ªói l·∫•y th·ªëng k√™: {e}")
            return False
    
    # ========================================================================
    # TEST SUITES
    # ========================================================================
    
    def run_quick_test(self):
        """Ch·∫°y ki·ªÉm tra nhanh"""
        self.logger.log_start("quick_test", "B·∫Øt ƒë·∫ßu ki·ªÉm tra m·∫°ng nhanh")
        
        print("üöÄ KI·ªÇM TRA M·∫†NG NHANH")
        print("=" * 50)
        print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        start_time = datetime.now()
        
        tests = [
            ("Local Info", self.get_local_info),
            ("DNS Check", self.check_dns),
            ("Connectivity Check", self.check_connectivity),
            ("Ping Google DNS", lambda: self.ping_test("8.8.8.8", 2)),
            ("Ping Cloudflare DNS", lambda: self.ping_test("1.1.1.1", 2))
        ]
        
        completed_tests = 0
        failed_tests = 0
        
        for i, (test_name, test_func) in enumerate(tests, 1):
            try:
                print(f"\n{i}. {test_name}...")
                self.logger.log_info("test_execution", f"ƒêang ch·∫°y: {test_name}")
                
                success = test_func()
                
                if success:
                    completed_tests += 1
                    print(f"   ‚úÖ {test_name} th√†nh c√¥ng")
                else:
                    failed_tests += 1
                    print(f"   ‚ùå {test_name} th·∫•t b·∫°i")
                    
            except Exception as e:
                failed_tests += 1
                self.logger.log_error("test_execution", f"L·ªói trong {test_name}: {str(e)}")
                print(f"   ‚ùå {test_name} l·ªói: {e}")
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        self.generate_report("Quick Test", completed_tests, failed_tests, duration)
        
        return {
            'total_tests': len(tests),
            'completed_tests': completed_tests,
            'failed_tests': failed_tests,
            'duration_seconds': round(duration, 2),
            'success_rate': completed_tests / len(tests) * 100
        }
    
    def run_full_test(self):
        """Ch·∫°y ki·ªÉm tra ƒë·∫ßy ƒë·ªß"""
        self.logger.log_start("full_test", "B·∫Øt ƒë·∫ßu ki·ªÉm tra m·∫°ng ƒë·∫ßy ƒë·ªß")
        
        print("üöÄ KI·ªÇM TRA M·∫†NG ƒê·∫¶Y ƒê·ª¶")
        print("=" * 50)
        print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        start_time = datetime.now()
        
        tests = [
            ("Local Info", self.get_local_info),
            ("DNS Check", self.check_dns),
            ("Connectivity Check", self.check_connectivity),
            ("Ping Google DNS", lambda: self.ping_test("8.8.8.8", 3)),
            ("Ping Cloudflare DNS", lambda: self.ping_test("1.1.1.1", 3)),
            ("Port Scan", lambda: self.port_scan("127.0.0.1")),
            ("Network Stats", self.get_network_stats)
        ]
        
        completed_tests = 0
        failed_tests = 0
        
        for i, (test_name, test_func) in enumerate(tests, 1):
            try:
                print(f"\n{i}. {test_name}...")
                self.logger.log_info("test_execution", f"ƒêang ch·∫°y: {test_name}")
                
                success = test_func()
                
                if success:
                    completed_tests += 1
                    print(f"   ‚úÖ {test_name} th√†nh c√¥ng")
                else:
                    failed_tests += 1
                    print(f"   ‚ùå {test_name} th·∫•t b·∫°i")
                    
            except Exception as e:
                failed_tests += 1
                self.logger.log_error("test_execution", f"L·ªói trong {test_name}: {str(e)}")
                print(f"   ‚ùå {test_name} l·ªói: {e}")
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        self.generate_report("Full Test", completed_tests, failed_tests, duration)
        
        return {
            'total_tests': len(tests),
            'completed_tests': completed_tests,
            'failed_tests': failed_tests,
            'duration_seconds': round(duration, 2),
            'success_rate': completed_tests / len(tests) * 100
        }
    
    def run_advanced_test(self):
        """Ch·∫°y ki·ªÉm tra n√¢ng cao"""
        self.logger.log_start("advanced_test", "B·∫Øt ƒë·∫ßu ki·ªÉm tra m·∫°ng n√¢ng cao")
        
        print("üöÄ KI·ªÇM TRA M·∫†NG N√ÇNG CAO")
        print("=" * 50)
        print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        start_time = datetime.now()
        
        tests = [
            ("Network LAN Scan", lambda: self.network_scan("192.168.1", 1, 10)),
            ("Port Range Scan", lambda: self.port_scan("127.0.0.1", port_range=(20, 100))),
            ("Bandwidth Test", lambda: self.bandwidth_test("google.com")),
            ("Network Statistics", self.get_network_stats),
            ("Traceroute Test", lambda: self.traceroute("8.8.8.8"))
        ]
        
        completed_tests = 0
        failed_tests = 0
        
        for i, (test_name, test_func) in enumerate(tests, 1):
            try:
                print(f"\n{i}. {test_name}...")
                self.logger.log_info("test_execution", f"ƒêang ch·∫°y: {test_name}")
                
                success = test_func()
                
                if success:
                    completed_tests += 1
                    print(f"   ‚úÖ {test_name} th√†nh c√¥ng")
                else:
                    failed_tests += 1
                    print(f"   ‚ùå {test_name} th·∫•t b·∫°i")
                    
            except Exception as e:
                failed_tests += 1
                self.logger.log_error("test_execution", f"L·ªói trong {test_name}: {str(e)}")
                print(f"   ‚ùå {test_name} l·ªói: {e}")
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        self.generate_report("Advanced Test", completed_tests, failed_tests, duration)
        
        return {
            'total_tests': len(tests),
            'completed_tests': completed_tests,
            'failed_tests': failed_tests,
            'duration_seconds': round(duration, 2),
            'success_rate': completed_tests / len(tests) * 100
        }
    
    def generate_report(self, test_type, completed_tests, failed_tests, duration):
        """T·∫°o b√°o c√°o k·∫øt qu·∫£"""
        print(f"\n" + "=" * 60)
        print(f"üìä B√ÅO C√ÅO K·∫æT QU√Å - {test_type.upper()}")
        print("=" * 60)
        
        # DNS Status
        dns_results = self.results.get('dns', [])
        if dns_results:
            dns_success = sum(1 for r in dns_results if r.get('success'))
            print(f"üåê DNS: {dns_success}/{len(dns_results)} domains th√†nh c√¥ng")
        
        # Connectivity Status
        conn_results = self.results.get('connectivity', [])
        if conn_results:
            conn_success = sum(1 for r in conn_results if r.get('success'))
            print(f"üîó Connectivity: {conn_success}/{len(conn_results)} hosts th√†nh c√¥ng")
        
        # Ping Status
        ping_results = {k: v for k, v in self.results.items() if k.startswith('ping_')}
        if ping_results:
            ping_success = sum(1 for r in ping_results.values() if r.get('success'))
            print(f"üèì Ping: {ping_success}/{len(ping_results)} hosts th√†nh c√¥ng")
        
        # Port Scan Status
        port_scan = self.results.get('port_scan', {})
        if port_scan:
            summary = port_scan.get('summary', {})
            open_count = summary.get('open_count', 0)
            total_ports = summary.get('total_ports', 0)
            print(f"üîå Port Scan: {open_count}/{total_ports} ports m·ªü")
        
        # Network Scan Status
        network_scan = self.results.get('network_scan', {})
        if network_scan:
            hosts_found = network_scan.get('active_hosts_found', 0)
            total_ips = network_scan.get('total_ips_scanned', 0)
            print(f"üîç Network Scan: {hosts_found}/{total_ips} hosts t√¨m th·∫•y")
        
        # Bandwidth Test Status
        bandwidth_test = self.results.get('bandwidth_test', {})
        if bandwidth_test:
            speed_mbps = bandwidth_test.get('speed_mbps', 0)
            print(f"üìä Bandwidth: {speed_mbps:.2f} Mbps")
        
        # Local Info
        local_info = self.results.get('local_info', {})
        if local_info and 'hostname' in local_info:
            print(f"üè† Local: {local_info['hostname']} ({local_info.get('local_ip', 'N/A')})")
        
        # T·ªïng k·∫øt
        total_tests = completed_tests + failed_tests
        success_rate = (completed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"\nüìà T·ªîNG K·∫æT:")
        print(f"   ‚úÖ Th√†nh c√¥ng: {completed_tests}/{total_tests} tests ({success_rate:.1f}%)")
        print(f"   ‚è±Ô∏è Th·ªùi gian: {duration:.2f} gi√¢y")
        print(f"   üìÅ Log file: {self.logger.log_file}")
        
        print("=" * 60)
        
        # L∆∞u k·∫øt qu·∫£
        self.save_results()
        
        # In summary logs
        self.logger.print_summary()
    
    def save_results(self):
        """L∆∞u k·∫øt qu·∫£ v√†o file JSON"""
        filename = f"network_toolkit_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'results': self.results
        }
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=2, ensure_ascii=False)
            print(f"üíæ K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o: {filename}")
        except Exception as e:
            print(f"‚ùå L·ªói khi l∆∞u file: {e}")

# ============================================================================
# MAIN MENU INTERFACE
# ============================================================================

def show_main_menu():
    """Hi·ªÉn th·ªã menu ch√≠nh"""
    print("\n" + "=" * 70)
    print("üåê NETWORK TOOLKIT - C√îNG C·ª§ KI·ªÇM TRA M·∫†NG TO√ÄN DI·ªÜN")
    print("=" * 70)
    print("üìã MENU CH√çNH:")
    print()
    print("   üöÄ KI·ªÇM TRA NHANH:")
    print("   1. Quick Test        - Ki·ªÉm tra nhanh (5 tests, ~30s)")
    print("   2. Full Test         - Ki·ªÉm tra ƒë·∫ßy ƒë·ªß (7 tests, ~2 ph√∫t)")
    print("   3. Advanced Test     - Ki·ªÉm tra n√¢ng cao (5 tests, ~5 ph√∫t)")
    print()
    print("   üîß KI·ªÇM TRA RI√äNG L·∫∫:")
    print("   4. DNS Test          - Ki·ªÉm tra DNS resolution")
    print("   5. Ping Test         - Ping ƒë·∫øn host t√πy ch·ªçn")
    print("   6. Port Scan         - Qu√©t port tr√™n host")
    print("   7. Network Scan      - Qu√©t thi·∫øt b·ªã trong LAN")
    print("   8. Bandwidth Test    - Ki·ªÉm tra bƒÉng th√¥ng")
    print("   9. Traceroute        - Theo d√µi ƒë∆∞·ªùng ƒëi g√≥i tin")
    print("   10. Network Stats    - Th·ªëng k√™ m·∫°ng chi ti·∫øt")
    print()
    print("   üìä TI·ªÜN √çCH:")
    print("   11. Export CSV       - Export logs v·ªõi nhi·ªÅu t√πy ch·ªçn")
    print("   12. Export HTML      - T·∫°o b√°o c√°o HTML ƒë·∫πp m·∫Øt")
    print("   13. View Summary     - Xem t√≥m t·∫Øt logs")
    print("   14. CSV Help         - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng CSV")
    print("   0. Tho√°t")
    print("=" * 70)

def show_csv_help():
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng CSV"""
    print("\nüìä H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG CSV EXPORT")
    print("=" * 60)
    print()
    print("üéØ M·ª§C ƒê√çCH:")
    print("   CSV files gi√∫p b·∫°n ph√¢n t√≠ch logs b·∫±ng Excel, Google Sheets,")
    print("   ho·∫∑c c√°c c√¥ng c·ª• data analysis kh√°c.")
    print()
    print("üìã C√ÅC LO·∫†I EXPORT:")
    print()
    print("   1Ô∏è‚É£ BASIC EXPORT:")
    print("      - Columns: Timestamp, Action, Status, Message")
    print("      - D√πng ƒë·ªÉ: Xem t·ªïng quan logs")
    print("      - Ph√π h·ª£p: B√°o c√°o ƒë∆°n gi·∫£n")
    print()
    print("   2Ô∏è‚É£ DETAILED EXPORT:")
    print("      - Columns: + Details (th√¥ng tin chi ti·∫øt)")
    print("      - D√πng ƒë·ªÉ: Ph√¢n t√≠ch s√¢u, debug")
    print("      - Ph√π h·ª£p: Technical analysis")
    print()
    print("   3Ô∏è‚É£ SUMMARY EXPORT:")
    print("      - Columns: Metric, Value")
    print("      - D√πng ƒë·ªÉ: Th·ªëng k√™ t·ªïng h·ª£p")
    print("      - Ph√π h·ª£p: Dashboard, KPI tracking")
    print()
    print("   4Ô∏è‚É£ PERFORMANCE EXPORT:")
    print("      - Columns: Action, Status, Timestamp, Execution_Time")
    print("      - D√πng ƒë·ªÉ: Ph√¢n t√≠ch hi·ªáu su·∫•t")
    print("      - Ph√π h·ª£p: Performance monitoring")
    print()
    print("   5Ô∏è‚É£ CUSTOM FILTER:")
    print("      - Filter theo: Status (success/error/warning)")
    print("      - Filter theo: Action (ping_test/dns_check/...)")
    print("      - D√πng ƒë·ªÉ: T·∫≠p trung v√†o v·∫•n ƒë·ªÅ c·ª• th·ªÉ")
    print()
    print("üí° TIPS S·ª¨ D·ª§NG:")
    print("   ‚Ä¢ D√πng Basic cho b√°o c√°o h√†ng ng√†y")
    print("   ‚Ä¢ D√πng Performance ƒë·ªÉ monitor t·ªëc ƒë·ªô m·∫°ng")
    print("   ‚Ä¢ D√πng Custom Filter ƒë·ªÉ t√¨m l·ªói c·ª• th·ªÉ")
    print("   ‚Ä¢ Import v√†o Excel ƒë·ªÉ t·∫°o charts")
    print("   ‚Ä¢ D√πng pivot tables ƒë·ªÉ ph√¢n t√≠ch trends")
    print()
    print("üìà V√ç D·ª§ PH√ÇN T√çCH:")
    print("   ‚Ä¢ So s√°nh ping time theo th·ªùi gian")
    print("   ‚Ä¢ ƒê·∫øm s·ªë l·ªói DNS theo ng√†y")
    print("   ‚Ä¢ Tracking bandwidth qua c√°c l·∫ßn test")
    print("   ‚Ä¢ Monitoring port scan results")
    print("=" * 60)

def get_user_input(prompt, input_type=str, default=None):
    """L·∫•y input t·ª´ user v·ªõi validation"""
    while True:
        try:
            user_input = input(f"{prompt}")
            if user_input.strip() == "" and default is not None:
                return default
            return input_type(user_input.strip())
        except ValueError:
            print(f"‚ùå Vui l√≤ng nh·∫≠p {input_type.__name__} h·ª£p l·ªá")
        except KeyboardInterrupt:
            print("\nüëã ƒê√£ h·ªßy")
            return None

def main():
    """Main function"""
    toolkit = NetworkToolkit()
    
    print("üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Network Toolkit!")
    print("üí° Tip: B·∫°n c√≥ th·ªÉ nh·∫•n Ctrl+C b·∫•t k·ª≥ l√∫c n√†o ƒë·ªÉ d·ª´ng")
    
    while True:
        try:
            show_main_menu()
            
            choice = get_user_input("\nüëâ Ch·ªçn ch·ª©c nƒÉng (0-14): ", int)
            
            if choice is None:  # Ctrl+C
                break
            elif choice == 0:
                print("üëã T·∫°m bi·ªát!")
                break
            elif choice == 1:
                toolkit.run_quick_test()
            elif choice == 2:
                toolkit.run_full_test()
            elif choice == 3:
                toolkit.run_advanced_test()
            elif choice == 4:
                domains = get_user_input("Nh·∫≠p domains (c√°ch nhau b·ªüi d·∫•u ph·∫©y, Enter = m·∫∑c ƒë·ªãnh): ", str, "")
                if domains:
                    domain_list = [d.strip() for d in domains.split(",")]
                    toolkit.check_dns(domain_list)
                else:
                    toolkit.check_dns()
            elif choice == 5:
                host = get_user_input("Nh·∫≠p host ƒë·ªÉ ping (Enter = 8.8.8.8): ", str, "8.8.8.8")
                count = get_user_input("S·ªë l·∫ßn ping (Enter = 4): ", int, 4)
                toolkit.ping_test(host, count)
            elif choice == 6:
                host = get_user_input("Nh·∫≠p host ƒë·ªÉ scan (Enter = 127.0.0.1): ", str, "127.0.0.1")
                port_range_input = get_user_input("Nh·∫≠p port range (vd: 20-100, Enter = ports m·∫∑c ƒë·ªãnh): ", str, "")
                if port_range_input and "-" in port_range_input:
                    start, end = map(int, port_range_input.split("-"))
                    toolkit.port_scan(host, port_range=(start, end))
                else:
                    toolkit.port_scan(host)
            elif choice == 7:
                network = get_user_input("Nh·∫≠p network (Enter = 192.168.1): ", str, "192.168.1")
                start = get_user_input("IP b·∫Øt ƒë·∫ßu (Enter = 1): ", int, 1)
                end = get_user_input("IP k·∫øt th√∫c (Enter = 10): ", int, 10)
                toolkit.network_scan(network, start, end)
            elif choice == 8:
                host = get_user_input("Nh·∫≠p host (Enter = google.com): ", str, "google.com")
                port = get_user_input("Nh·∫≠p port (Enter = 80): ", int, 80)
                duration = get_user_input("Th·ªùi gian test (gi√¢y, Enter = 5): ", int, 5)
                toolkit.bandwidth_test(host, port, duration)
            elif choice == 9:
                target = get_user_input("Nh·∫≠p target (Enter = 8.8.8.8): ", str, "8.8.8.8")
                max_hops = get_user_input("Max hops (Enter = 15): ", int, 15)
                toolkit.traceroute(target, max_hops)
            elif choice == 10:
                toolkit.get_network_stats()
            elif choice == 11:
                toolkit.logger.interactive_csv_export()
            elif choice == 12:
                toolkit.logger.interactive_html_export()
            elif choice == 13:
                toolkit.logger.print_summary()
            elif choice == 14:
                show_csv_help()
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn 0-14.")
            
            if choice != 0:
                input("\n‚è∏Ô∏è  Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                
        except KeyboardInterrupt:
            print("\n\nüëã ƒê√£ d·ª´ng ch∆∞∆°ng tr√¨nh.")
            break
        except Exception as e:
            print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
            input("‚è∏Ô∏è  Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

if __name__ == "__main__":
    main()