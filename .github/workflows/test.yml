name: Network Toolkit Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce CI time
          - os: macos-latest
            python-version: 3.8

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"
    
    - name: Check requirements
      run: python setup.py
    
    - name: Test import
      run: python -c "import network_toolkit; print('✅ Import successful')"
    
    - name: Test basic functionality (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        python -c "
        import sys
        import signal
        def timeout_handler(signum, frame):
            print('⏰ Test timeout (expected)')
            sys.exit(0)
        signal.signal(signal.SIGALRM, timeout_handler)
        signal.alarm(30)
        try:
            from network_toolkit import NetworkToolkit
            toolkit = NetworkToolkit()
            print('Testing DNS...')
            toolkit.check_dns(['google.com'])
            print('Testing local info...')
            toolkit.get_local_info()
            print('✅ Basic tests passed')
        except Exception as e:
            print(f'⚠️ Test completed with: {e}')
        finally:
            signal.alarm(0)
        "
    
    - name: Test basic functionality (Windows)
      if: runner.os == 'Windows'
      timeout-minutes: 2
      run: |
        python -c "
        try:
            from network_toolkit import NetworkToolkit
            toolkit = NetworkToolkit()
            print('Testing DNS...')
            toolkit.check_dns(['google.com'])
            print('Testing local info...')
            toolkit.get_local_info()
            print('✅ Basic tests passed')
        except Exception as e:
            print(f'⚠️ Test completed with: {e}')
        "
    
    - name: Test CSV export
      timeout-minutes: 1
      run: |
        python -c "
        try:
            from network_toolkit import NetworkToolkit
            toolkit = NetworkToolkit()
            toolkit.get_local_info()
            result = toolkit.logger.export_csv('test_export.csv', 'basic')
            print('✅ CSV export test passed' if result else '❌ CSV export failed')
        except Exception as e:
            print(f'⚠️ CSV export test: {e}')
        "
    
    - name: Test HTML export
      timeout-minutes: 1
      run: |
        python -c "
        try:
            from network_toolkit import NetworkToolkit
            toolkit = NetworkToolkit()
            toolkit.get_local_info()
            result = toolkit.logger.export_html('test_report.html', 'summary')
            print('✅ HTML export test passed' if result else '❌ HTML export failed')
        except Exception as e:
            print(f'⚠️ HTML export test: {e}')
        "

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install flake8
      run: pip install flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 network_toolkit.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 network_toolkit.py --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics